wnn_prepare_data.py
ECGData.zip already exists, skipping download.
ECGData.mat already exists, skipping extraction.
Number of signal from ECGData: 162
Source signals labeled as ARR: 96
Source signals labeled as CHF: 30
Source signals labeled as NSR: 36
Source signals labeled as ARR: 32
Source signals labeled as CHF: 10
Source signals labeled as NSR: 12
SIGNAL_LENGTH=128
wnn_prepare_data.py:82: UserWarning: kernel_size exceeds volume extent: the volume will be zero-padded.
  baseline = medfilt(signal, kernel_size=kernel_size)
Signals labeled as ARR: 16384
Signals labeled as CHF: 5120
Signals labeled as NSR: 6144
Train data size: 22118
Test data size:  5530
wnn_prepare_data.py:175: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at C:\actions-runner\_work\pytorch\pytorch\pytorch\torch\csrc\utils\tensor_new.cpp:257.)
  train_data_tensor = torch.tensor(train_data, dtype=torch.float32)
wnn_prepare_data.py:176: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_labels_tensor = torch.tensor(train_labels_onehot, dtype=torch.float32)
wnn_prepare_data.py:179: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
  test_labels_tensor = torch.tensor(test_labels_onehot, dtype=torch.float32)

Process finished with exit code 0

SIGNAL_LENGTH = 128
SIGNAL_FREQUENCY = 128
num_classes = 3
batch_size = 32